1)Plus One

You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
Increment the large integer by one and return the resulting array of digits.


var plusOne = function(digits) {

     for (let i = digits.length - 1; i >= 0; i--) {
        // If the current digit is less than 9, just increment it and return the result
        if (digits[i] < 9) {
            digits[i]++;
            return digits;
        }

         digits[i] = 0;
     }
     digits.unshift(1);
     return digits;
    
};


2) Length of Last Word
Given a string s consisting of words and spaces, return the length of the last word in the string.

A word is a maximal  substring
consisting of non-space characters only.
Example 1:

Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.



var lengthOfLastWord = function(s) {

      s = s.trim();
       const words = s.split(' ');
      return words[words.length - 1].length;
    
};



3)Given a string s consisting of words and spaces, return the length of the last word in the string.

A word is a maximal 
substring
 consisting of non-space characters only.

 

Example 1:

Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.




var lengthOfLastWord = function(s) {

      s = s.trim();
       const words = s.split(' ');
      return words[words.length - 1].length;
    
};

4) Find the Index of the First Occurrence in a String


var strStr = function(haystack, needle) {


     if (needle === "") return 0; 

    return haystack.indexOf(needle);
    
};


5)Remove Element



var removeElement = function(nums, val) {
     let k = 0; // Initialize k to 0, representing the count of elements not equal to val.

    for (let i = 0; i < nums.length; i++) {
        if (nums[i] !== val) {
            nums[k] = nums[i];
            k++;
        }
    }

    return k;
};


6)Remove Duplicates from Sorted Array
var removeDuplicates = function(nums) {

     if (nums.length === 0) return 0;

    let k = 1; // Initialize k to 1 since the first element is always unique.

    for (let i = 1; i < nums.length; i++) {
        if (nums[i] !== nums[i - 1]) {
            nums[k] = nums[i];
            k++;
        }
    }

    return k;
    
};


7)Valid Parentheses

var isValid = function(s) {
     const stack = [];
    const bracketMap = {
        ')': '(',
        '}': '{',
        ']': '['
    };
    for (let i = 0; i < s.length; i++) {
        const char = s[i];
      if (bracketMap[char]) {
            const topElement = stack.length > 0 ? stack.pop() : '#';
            if (topElement !== bracketMap[char]) {
                return false;
            }
        } else { 
            stack.push(char);
        }
    }
    return stack.length === 0;
};


8)Longest Common Prefix

var longestCommonPrefix = function(strs) {
     let prefix = strs[0];

   
    for (let i = 1; i < strs.length; i++) {
        while (strs[i].indexOf(prefix) !== 0) {
          
            prefix = prefix.slice(0, -1);
           
            if (prefix === "") return "";
        }
    }

    return prefix;
};


9)Roman to Integer


var romanToInt = function(s) {
    const romanMap = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    };
    let total = 0;
    let prevValue = 0;

    
    for (let i = 0; i < s.length; i++) {
        
        let currValue = romanMap[s[i]];

        
        if (prevValue < currValue) {
            total += currValue - 2 * prevValue;
        } else {
            total += currValue;
        }

       
        prevValue = currValue;
    }

    return total;
};


10) Palindrome Number

var isPalindrome = function(x) {
    if (x<0){
        return false;
    }
    let str=x.toString();

    let reversedStr=str.split('').reverse().join('');
    return str== reversedStr;
    
    };


11)Two Sum


var twoSum = function(nums, target) {
    const map = new Map();
    
    // Iterate through the array
    for (let i = 0; i < nums.length; i++) {
        const complement = target - nums[i];
        
        // Check if the complement exists in the hash map
        if (map.has(complement)) {
            // Return the indices of the complement and the current number
            return [map.get(complement), i];
        }
        
        // Add the current number and its index to the hash map
        map.set(nums[i], i);
    }
    
    // If no solution is found, which should not happen per problem statement
    throw new Error('No two sum solution');
};

